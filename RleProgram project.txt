import java.util.Arrays;
import java.util.Scanner; //import the scanner for user input

public class RleProgram {


    public static String toHexString(byte[] data) {
        String answer = ""; //Stores the final result
        String[] convert = new String[data.length]; //helps convert the number in each index to a string
        int i = 0;
        for (i = 0; i < data.length; i++) { //Switch statements that will convert integers to hexadecimal string
            switch (data[i]) {
                case 0:
                    convert[i] = "0";
                    break;
                case 1:
                    convert[i] = "1";
                    break;
                case 2:
                    convert[i] = "2";
                    break;
                case 3:
                    convert[i] = "3";
                    break;
                case 4:
                    convert[i] = "4";
                    break;
                case 5:
                    convert[i] = "5";
                    break;
                case 6:
                    convert[i] = "6";
                    break;
                case 7:
                    convert[i] = "7";
                    break;
                case 8:
                    convert[i] = "8";
                    break;
                case 9:
                    convert[i] = "9";
                    break;
                case 10:
                    convert[i] = "a";//Numbers will be converted to letters from here to case 15
                    break;
                case 11:
                    convert[i] = "b";
                    break;
                case 12:
                    convert[i] = "c";
                    break;
                case 13:
                    convert[i] = "d";
                    break;
                case 14:
                    convert[i] = "e";
                    break;
                case 15:
                    convert[i] = "f";

            }
            answer = answer + convert[i]; //Values will be stored here everytime the loop happens til the end of the input
        }

        return answer;
    }


    public static int countRuns(byte[] flatData) {
        int currentVal = 1;
        int group = 1;
        for (int i = 0; i < flatData.length - 1; i++) {
            if (flatData[i] == flatData[i + 1]) { //If value at a current index is same it will iterate until it isn't
                currentVal++;
            } else if (flatData[i] != flatData[i + 1]) { //This line was inspired by professor Zhou
                currentVal = 1;
                group++;//new groups will be formed until it reaches the last index
            }
            if (currentVal >= 15) {//If identical values are more than or equal to 15 a new group needs to be formed
                group++;
                currentVal = 1;//currentVal will restart and go back to one
            }
        }

        return group;
    }


    public static byte[] encodeRle(byte[] flatData) {
        int numCount = 1;
        int length = countRuns(flatData);//Does a method call to the result of CountRun
        byte[] sizeLen = new byte[length * 2];//Will represent and store the twice length of the array
        int group = 0;//Will store the number of group that will form

        for (int i = 0; i < flatData.length - 1; i++) {

            if (flatData[i] == flatData[i + 1]) {//If the next element in the array is identical to the previous element
                numCount++;

            } else if (flatData[i] != flatData[i + 1]) {//If the previous element and the current element aren't the same
                sizeLen[group * 2] = (byte) numCount;//Putting group inside sizeLen will help track where you are in the array
                sizeLen[group * 2 + 1] = (flatData[i]);//I got the idea for this from Zachery Utt
                numCount = 1;//Will reset back to one for a new number that the loop recognizes
                group++;
            }
            if (numCount >= 15) {//if the identical values repeat more than 15 times then make another group
                sizeLen[group * 2] = (byte) numCount;
                sizeLen[group * 2 + 1] = (flatData[i]);
                i++;
                numCount = 1;//Will reset back to one for a new number that the loop recognizes
                group++;
            }

        }
        sizeLen[group * 2] = (byte) numCount;
        sizeLen[group * 2 + 1] = (flatData[flatData.length - 1]);
        return sizeLen;
    }


    public static int getDecodedLength(byte[] rleData) {
        int res = 0;// Will store the final result
        int group = 0;
        for (int i = 0; i < rleData.length; i++) {
            if (i % 2 == 0) {//for every even indices
                res += rleData[i];//the value at the even indices will be added and stored in res
                group++;
            }
        }
        return res;
    }


    public static byte[] decodeRle(byte[] rleData) {
        int size = 0;
        int index = 0;
        for (int item : rleData) {
            size += item;
        }

        byte[] res = new byte[getDecodedLength(rleData)];
        for (int i = 0; i < rleData.length; i += 2) {// The "i += 2" was inspired by professor Zhou
            int value = rleData[i + 1]; //Ex: 1st outer for i = 0: value = rleData[i + 1] = 1, 2nd outer for i = 2: value = rleData[2+1] = 5,
            int repeats = rleData[i];//Ex: 1st outer for i = 0: repeats = rleData[i] = 3, 2nd outer for i = 2: repeats = rleData[2] = 2
            for (int j = 0; j < repeats; j++) {
                res[index] = (byte) value;//convert the int to byte since the final result has to be a byte
                index++;
            }
        }
        return res;
    }


    public static byte[] stringToData(String dataString) {
        byte[] count = new byte[dataString.length()];
        for (int i = 0; i < dataString.length(); i++) {//Convert hexadecimals to integers

            //Will transfer numbers in a string into integers from 0-9
            if (dataString.charAt(i) == '0') {
                count[i] = 0;
            }
            else if (dataString.charAt(i) == '1') {
                count[i] = 1;
            }
            else if (dataString.charAt(i) == '2') {
                count[i] = 2;
            }
            else if (dataString.charAt(i) == '3') {
                count[i] = 3;
            }
            else if (dataString.charAt(i) == '4') {
                count[i] = 4;
            }
            else if (dataString.charAt(i) == '5') {
                count[i] = 5;
            }
            else if (dataString.charAt(i) == '6') {
                count[i] = 6;
            }
            else if (dataString.charAt(i) == '7') {
                count[i] = 7;
            }
            else if (dataString.charAt(i) == '8') {
                count[i] = 8;
            }
            else if (dataString.charAt(i) == '9') {
                count[i] = 9;
            }
            else {
                char letter = Character.toUpperCase(dataString.charAt(i));//This line was inspired by Angela
                //Will make letters in a string (uppercase and lowercase) into integers ^^^

                if (letter == 'A') {//ex: 'A' will transform into 10 and if it was 'a' it would still transform into 10
                    count[i] = 10;
                }
                else if (letter == 'B') {
                    count[i] = 11;
                }
                else if (letter == 'C') {
                    count[i] = 12;
                }
                else if (letter == 'D') {
                    count[i] = 13;
                }
                else if (letter == 'E') {
                    count[i] = 14;
                }
                else if (letter == 'F') {
                    count[i] = 15;
                }
            }

        }


        return count;
    }


    public static String toRleString(byte[] rleData) {
        String answer = "";//final result will be stored here
        String[] convert = new String[rleData.length];
        int i = 0;
        for (i = 0; i < rleData.length; i += 2) {
            convert[i] = String.valueOf(rleData[i]);//Inspired by Zachery Utt
            //Will turn integer into a string number ^^^

            switch (rleData[i + 1]) {
                //Numbers will be converted to letters from 10-15
                case 10:
                    convert[i + 1] = "a";
                    break;
                case 11:
                    convert[i + 1] = "b";
                    break;
                case 12:
                    convert[i + 1] = "c";
                    break;
                case 13:
                    convert[i + 1] = "d";
                    break;
                case 14:
                    convert[i + 1] = "e";
                    break;
                case 15:
                    convert[i + 1] = "f";
                    break;
                default:
                    convert[i + 1] = String.valueOf(rleData[i + 1]);

            }
            answer = answer + convert[i] + convert[i + 1] + ":";//add a delimiter

        }
        return answer.substring(0, answer.length() - 1);//to remove the extra delimiter
    }


    public static byte[] stringToRle(String rleString) {
        // Ex: "15f:64" -> using "split" will help section and focus individually on the elements before and after each ":"
        String[] input = rleString.split(":");//inspired by Rachel Peterson
        int convert = input.length;
        // ["15f", "64"] -> {15, 15, 6, 4}
        byte[] answer = new byte[convert * 2];// takes in input and will store the final result of the loop. Return this statement at the end of loop
        int k = 0;// will represent the index in each section created by the split
        for (int i = 0; i < input.length; i++) {

            if (input[i].length() == 2) { //Ex: "64" -> size of 2 elements
                answer[k] = Byte.parseByte(input[i].substring(0, 1));//for the example "6" will be taken in here
                k++;
                answer[k] = Byte.parseByte(input[i].substring(1, 2), 16); //for the example "4" will be taken in here. Also base 16 because of hexadecimal
                k++;
            }
            if (input[i].length() == 3) { //Ex: "15f" -> size of 3 elements
                answer[k] = Byte.parseByte(input[i].substring(0, 2));// for the example "15" will be taken in here
                k++;
                answer[k] = Byte.parseByte(input[i].substring(2, 3), 16);//for the example "f" will be taken in here and converted to int 15
                k++;
            }

        }
        return answer;
    }









    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);

        // variable initialization
        int playerInput; // player's pick from the menu
        String fileName; // the name of the file the user wants
        byte[] imageData = null;
        boolean userChoice = true;

        System.out.println("Welcome to the RLE image encoder!\n");//Welcoming message
        System.out.println("Displaying Spectrum Image: ");
        ConsoleGfx.displayImage(ConsoleGfx.testRainbow); // Displays the color test

        while (userChoice) {


            // RLE Menu options
            System.out.println("\nRLE Menu\n" + "--------");
            System.out.println("0. Exit");
            System.out.println("1. Load File");
            System.out.println("2. Load Test Image");
            System.out.println("3. Read RLE String");
            System.out.println("4. Read RLE Hex String");
            System.out.println("5. Read Data Hex String");
            System.out.println("6. Display Image");
            System.out.println("7. Display RLE String");
            System.out.println("8. Display Hex RLE Data");
            System.out.println("9. Display Hex Flat Data");

            System.out.print("\nSelect a Menu Option: ");
            playerInput = scanner.nextInt();

            if (playerInput == 0) { //exit
                userChoice = false;
                break;

            } else if (playerInput == 1) {
                System.out.print("Enter name of file to load: "); //Load file
                fileName = scanner.next();
                imageData = ConsoleGfx.loadFile(fileName);


            } else if (playerInput == 2) { //Load test image
                imageData = ConsoleGfx.testImage;
                System.out.println("Test image data loaded.");

            } else if (playerInput == 3) { //Read RLE String
                System.out.println("Enter an RLE string to be decoded: ");
                fileName = scanner.next();
                imageData = decodeRle(stringToRle(fileName));//This line was inspired by Mariana
                //String-->array (Use method stringToRle) and then Rle--> flat (Use method decodeRLe)^^^

            } else if (playerInput == 4) { //Read RLE Hex String
                System.out.println("Enter the hex string holding RLE data: ");
                fileName = scanner.next();
                imageData = decodeRle(stringToData(fileName));//Hex String -->array and then make it flat (use method decodeRLe)

            } else if (playerInput == 5) { //Read Data Hex String
                System.out.println("Enter the hex string holding flat data: ");
                fileName = scanner.next();
                imageData = stringToData(fileName);//Hex String-->array (use method stringToData)


            } else if (playerInput == 6) { //Display image
                System.out.println("Displaying image...");
                ConsoleGfx.displayImage(imageData);
            }
            else if(playerInput == 7)
            {
                System.out.println("RLE representation: ");
                System.out.println(toRleString(encodeRle(imageData)));//use toRLeString method to transform an encodedRle -> String with delimiters
            }
            else if(playerInput == 8)
            {
                System.out.println("RLE hex values: ");
                System.out.println(Arrays.toString(RleProgram.encodeRle(imageData)));//This line was inspired by Mariana
            }
            else if(playerInput == 9)
            {
                System.out.println("Flat hex values: ");
                System.out.println(toHexString(imageData));//Rle -> hex string (use method toHexString)
            }

        }


    }
}
